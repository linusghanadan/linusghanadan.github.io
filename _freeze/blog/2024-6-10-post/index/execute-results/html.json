{
  "hash": "0858d4aa3b2092d3a6e599b981451905",
  "result": {
    "markdown": "---\ntitle: \"Dynamic simulation of forest growth with global sensitivity analysis\"\ndescription: \"Using a model of forest growth, I run a 300-year continuous dynamic simulation for the forest and then conduct a global sensitivity analysis looking at variation in maximum forest size.\"\nauthor: \n  - name: Linus Ghanadan\n    url: https://linusghanadan.github.io/\n    affiliation: MEDS\n    affiliation-url: https://ucsb-meds.github.io\ndate: \"June 10, 2024\"\ncategories:\n  - [Environmental Modeling]\n  - [Dynamic Simulation]\n  - [Sensitivity Analysis]\n  - [R]\ncitation:\n  url: https://linusghanadan.github.io/blog/2024-6-10-post/\ndraft: false\nformat:\n    html:\n        code-fold: false\n---\n\n\n## [Link to GitHub repository](https://github.com/linusghanadan/dynamic-simulation-forest-growth)\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(deSolve)\nlibrary(sensitivity)\n```\n:::\n\n\n## Source forest growth function\n\nFor the purposes of showing the complete documentation for the function that I am working with, I have included the full contents of the R script that was sourced when I originally conducted this analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Forest growth derivative\n#' @param time time since start\n#' @param C forest size (carbon)\n#' @param parms - as list with four values: r, g, K, threshold\n#' @param r exponential growth rate before canopy closure\n#' @param g linear growth rate after canopy closure\n#' @param K carrying capacity\n#' @param threshold canopy closure threshold\n#' @return derivative of forest size with time\ndforestgrowth = function(Time, C, parms) {\n  if (C < parms$threshold) {\n    dC = parms$r * C\n  } else {\n    dC = parms$g * (1 - C/parms$K)\n  }\n  return(list(dC))\n}\n```\n:::\n\n\n## Run model for 300 years (using the ODE solver)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set number of parameters\nnp = 2000\n\n# generate parameter sets for sensitivity analysis\nr_exp = rnorm(mean = 0.01, sd = 0.002, n = np)\ng_linear = rnorm(mean = 2, sd = 0.5, n = np)\nK_capacity = rnorm(mean = 250, sd = 50, n = np)\nthreshold_closure = rnorm(mean = 50, sd = 10, n = np)\n\nX1 = cbind.data.frame(r = r_exp, g = g_linear, K = K_capacity, threshold = threshold_closure)\n\nr_exp = rnorm(mean = 0.01, sd = 0.002, n = np)\ng_linear = rnorm(mean = 2, sd = 0.5, n = np)\nK_capacity = rnorm(mean = 250, sd = 50, n = np)\nthreshold_closure = rnorm(mean = 50, sd = 10, n = np)\n\nX2 = cbind.data.frame(r = r_exp, g = g_linear, K = K_capacity, threshold = threshold_closure)\n\n# fix negative values\nX1 = X1 %>% map_df(pmax, 0.0)\nX2 = X2 %>% map_df(pmax, 0.0)\n\n# create Sobol object and get parameter sets for running model\nsens_P = sobolSalt(model = NULL, X1, X2, nboot = 300)\n\n# add names to parameter sets\ncolnames(sens_P$X) = c(\"r\", \"g\", \"K\", \"threshold\")\n\n# set initial forest size and simulation times\nCinitial = 10\nsimtimes = seq(from = 1, to = 300)\n\n# run model with first parameter set\nparms = list(r = sens_P$X[1, \"r\"], g = sens_P$X[1, \"g\"], K = sens_P$X[1, \"K\"], threshold = sens_P$X[1, \"threshold\"])\n\nresult = ode(y = Cinitial, times = simtimes, func = dforestgrowth, parms = parms)\nresult = as.data.frame(result)\ncolnames(result) = c(\"time\", \"C\")\n\n# plot results\nggplot(result, aes(time, C)) +\n  geom_line() +\n  labs(x = \"Time (years)\", y = \"Forest Size (kg C)\", title = \"Forest Growth Trajectory\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Conduct a global sensitivity analysis looking at variation in maximum forest size\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to compute maximum forest size\ncompute_max_forest_size <- function(carbontime) {\n  max_size <- max(carbontime$C)\n  return(list(max_size = max_size))\n}\n\n# set number of parameters\nnp <- 2000\n\n# generate parameter sets for sensitivity analysis\nr_exp <- rnorm(mean = 0.01, sd = 0.001, n = np)\ng_linear <- rnorm(mean = 2, sd = 0.2, n = np)\nK_capacity <- rnorm(mean = 250, sd = 25, n = np)\nthreshold_closure <- rnorm(mean = 50, sd = 5, n = np)\n\nX1 <- cbind.data.frame(r = r_exp, g = g_linear, K = K_capacity, threshold = threshold_closure)\n\nr_exp <- rnorm(mean = 0.01, sd = 0.001, n = np)\ng_linear <- rnorm(mean = 2, sd = 0.2, n = np)\nK_capacity <- rnorm(mean = 250, sd = 25, n = np)\nthreshold_closure <- rnorm(mean = 50, sd = 5, n = np)\n\nX2 <- cbind.data.frame(r = r_exp, g = g_linear, K = K_capacity, threshold = threshold_closure)\n\n# create Sobol object and get parameter sets for running model\nsens_forest <- sobolSalt(model = NULL, X1, X2, nboot = 300)\ncolnames(sens_forest$X) <- c(\"r\", \"g\", \"K\", \"threshold\")\n\n# wrapper function to run model and compute maximum forest size\np_wrapper <- function(r, g, K, threshold, Cinitial, simtimes, odefunc, metricfunc) {\n  parms <- list(r = r, g = g, K = K, threshold = threshold)\n  result <- ode(y = Cinitial, times = simtimes, func = odefunc, parms = parms)\n  result <- as.data.frame(result)\n  colnames(result) <- c(\"time\", \"C\")\n  metrics <- metricfunc(result)\n  return(metrics)\n}\n\n# set initial forest size and simulation times\nCinitial <- 10\nsimtimes <- seq(from = 1, to = 300)\n\n# run model for all parameter sets and compute maximum forest size\nallresults <- as.data.frame(sens_forest$X) %>%\n  pmap(p_wrapper, Cinitial = Cinitial, simtimes = simtimes, odefunc = dforestgrowth, metricfunc = compute_max_forest_size)\n\n# extract maximum forest size results into a data frame\nallres <- allresults %>% map_dfr(`[`, \"max_size\")\ncolnames(allres) <- \"max_size\"\n\n# create sensitivity analysis box plot\nggplot(allres, aes(x = \"All Parameter Sets\", y = max_size)) +\n  geom_boxplot(color = \"black\") +\n  labs(x = NULL, y = \"Maximum Forest Size (kg C)\", title = \"Global Sensitivity Analysis: Impact of Varying Parameters on Maximum Forest Size\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Compute Sobol indices\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# perform sensitivity analysis\nsens_result <- tell(sens_forest, allres$max_size)\n\n# label rows in the Sobol indices\nrownames(sens_result$S) <- c(\"r\", \"g\", \"K\", \"threshold\")\nrownames(sens_result$T) <- c(\"r\", \"g\", \"K\", \"threshold\")\n\n# print Sobol indices\nprint(sens_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsobolSalt(model = NULL, X1 = X1, X2 = X2, nboot = 300)\n\nModel runs: 12000 \n\nModel variance: 259.1147 \n\nFirst order indices:\n            original          bias std. error   min. c.i.  max. c.i.\nr         0.36149971  0.0011273665 0.02110958 0.318507758 0.40419638\ng         0.20173688 -0.0004085490 0.01972630 0.167238494 0.23885416\nK         0.38519114 -0.0007232605 0.01943902 0.346953125 0.42296465\nthreshold 0.04681109 -0.0005090820 0.02021289 0.007574042 0.09182827\n\nTotal indices:\n            original         bias  std. error  min. c.i.  max. c.i.\nr         0.36632601 0.0021184824 0.016727365 0.33023866 0.39628585\ng         0.20860691 0.0007662971 0.009058236 0.18996827 0.22487839\nK         0.36580963 0.0013349170 0.016822341 0.33087429 0.39626077\nthreshold 0.05997333 0.0003119082 0.003171481 0.05327785 0.06591501\n```\n:::\n:::\n\n\n## Conclusion\n\nThis sensitivity analysis suggests that the carrying capacity (K) and the pre-canopy closure growth rate (r) are the most influential parameters in determining the maximum forest size estimates. Variations in either of these parameters could lead to significant differences in the maximum size that a forest can reach. Because of this, it is crucial to have accurate estimates of all parameters, but especially K and r, so that predictions of the maximum forest size are accurate. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
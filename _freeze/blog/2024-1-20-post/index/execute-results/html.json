{
  "hash": "b21d5ccd6d2447c8b267e3d09e83331a",
  "result": {
    "markdown": "---\ntitle: \"Spatial Analysis of 2021 Houston Power Crisis\"\ndescription: \"Using data from the NASA's VIIRS instrument, I look at where residential blackouts occurred. Then, I visualize this data at the census tract level and analyze the relationship to median income.\"\nauthor: \n  - name: Linus Ghanadan\n    url: https://linusghanadan.github.io/\n    affiliation: MEDS\n    affiliation-url: https://ucsb-meds.github.io\ndate: \"January 20, 2024\"\ncategories:\n  - [Geospatial Analysis]\n  - [R]\nimage: income.jpeg\ncitation:\n  url: https://linusghanadan.github.io/blog/2024-1-20-post/\ndraft: false\nformat:\n    html:\n        code-fold: false\n---\n\n\n\n\n## [Link to GitHub repository](https://github.com/linusghanadan/houston_power_crisis/tree/main)\n\n## Purpose\n\nIn February 2021, Texas faced an unprecedented power crisis that left millions without electricity as a result of three winter storms ([Ramsey, 2021](https://www.texastribune.org/2021/03/10/texas-ercot-fixing-power-grid/)). Struggling to meet the extraordinary demand for heating amid freezing temperatures, the Electric Reliability Council of Texas (ERCOT) implemented widespread blackouts to prevent a total grid collapse. In addition to exposing the vulnerabilities of Texas's energy infrastructure, the crisis also prompted a nationwide discussion on the resilience of power grids in the face of extreme weather events.\n\nThis analysis will look at where residential blackouts occurred during February 2021 in the Houston area. After mapping the blackout data onto census tracts, I'll look at the median income of the census tracts that were affected by residential blackouts compared to those that were not affected.\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# general libraries\nlibrary(here)\nlibrary(tidyverse)\n\n# geospatial libraries\nlibrary(sf)\nlibrary(stars)\nlibrary(raster)\nlibrary(ggspatial)\n```\n:::\n\n\n## Data\n\n#### Blackout TIF files\nData on blackouts comes from NASA's Visible Infrared Imaging Radiometer Suite (VIIRS) instrument and were accessed from NASA's website ([NASA, n.d.](https://ladsweb.modaps.eosdis.nasa.gov/)). We will look at 2021-02-07 and 2021-02-16, as two days provide us with contrasting images to visualize the extent of the power outage in Texas. Houston lies on the border of two tiles (h08v06 and h08v05) that are measured by the VIIRS instrument, so we will download two tiles per date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in and combine night lights data\n\n## Loading 02/07/2021 tiles as stars objects\nh08v05_lights1 <- read_stars(here(\"data\", \"2024-1-20-post-data\", \"VNP46A1\", \"VNP46A1.A2021038.h08v05.001.2021039064328.tif\"))\nh08v06_lights1 <- read_stars(here(\"data\", \"2024-1-20-post-data\", \"VNP46A1\", \"VNP46A1.A2021038.h08v06.001.2021039064329.tif\"))\n\n## Loading 02/16/2021 tiles as stars objects\nh08v05_lights2 <- read_stars(here(\"data\", \"2024-1-20-post-data\", \"VNP46A1\", \"VNP46A1.A2021047.h08v05.001.2021048091106.tif\"))\nh08v06_lights2 <- read_stars(here(\"data\", \"2024-1-20-post-data\", \"VNP46A1\", \"VNP46A1.A2021047.h08v06.001.2021048091105.tif\"))\n\n## Combining tiles for each day\nlights1 <- st_mosaic(c(h08v05_lights1, h08v06_lights1, along = \"y\"))\nlights2 <- st_mosaic(c(h08v05_lights2, h08v06_lights2, along = \"y\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that tiles for day 1 were successfully combined\n## For x, value in \"to\" column should be the same in all three outputs\n## For y, value in \"to\" column of first output df should be sum of \"to\" values in second and third outputs)\nst_dimensions(lights1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys x/y\nx    1 2400   -100  0.004167 WGS 84 [x]\ny    1 4800     40 -0.004167 WGS 84 [y]\n```\n:::\n\n```{.r .cell-code}\nst_dimensions(h08v05_lights1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys point x/y\nx    1 2400   -100  0.004167 WGS 84 FALSE [x]\ny    1 2400     40 -0.004167 WGS 84 FALSE [y]\n```\n:::\n\n```{.r .cell-code}\nst_dimensions(h08v06_lights1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys point x/y\nx    1 2400   -100  0.004167 WGS 84 FALSE [x]\ny    1 2400     30 -0.004167 WGS 84 FALSE [y]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that tiles for day 2 were successfully combined\n## For x, value in \"to\" column should be the same in all three outputs\n## For y, value in \"to\" column of first output df should be sum of \"to\" values in second and third outputs)\nst_dimensions(lights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys x/y\nx    1 2400   -100  0.004167 WGS 84 [x]\ny    1 4800     40 -0.004167 WGS 84 [y]\n```\n:::\n\n```{.r .cell-code}\nst_dimensions(h08v05_lights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys point x/y\nx    1 2400   -100  0.004167 WGS 84 FALSE [x]\ny    1 2400     40 -0.004167 WGS 84 FALSE [y]\n```\n:::\n\n```{.r .cell-code}\nst_dimensions(h08v06_lights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys point x/y\nx    1 2400   -100  0.004167 WGS 84 FALSE [x]\ny    1 2400     30 -0.004167 WGS 84 FALSE [y]\n```\n:::\n:::\n\n\n#### Highway locations GeoPackage\n\nTypically highways account for a large portion of the night lights observable from space. To minimize falsely identifying areas with reduced traffic as areas without power, we will ignore areas near highways. We used Geofabrik to retrieve a shapefile of all highways in Texas and prepared a GeoPackage containing just the subset of roads that intersect the Houston metropolitan area ([Geofabrik, 2022](https://download.geofabrik.de/)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in highways data and reproject CRS\n## Defining SQL query\nquery <- \"SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'\"\n## Loading highways data and storing as sf object\nhighways <- st_read(here(\"data\", \"2024-1-20-post-data\", \"gis_osm_roads_free_1.gpkg\"), query = query) %>% \n  st_make_valid()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading query `SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway''\nfrom data source `/Users/linusghanadan/Documents/MEDS/other/linusghanadan.github.io/data/2024-1-20-post-data/gis_osm_roads_free_1.gpkg' \n  using driver `GPKG'\nSimple feature collection with 6085 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -96.50429 ymin: 29.00174 xmax: -94.39619 ymax: 30.50886\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n## Reprojecting CRS of to EPSG:3083\nhighways <- st_transform(highways, crs = st_crs(3083))\n## Checking that CRS was changed (should print CRS 3083 at bottom of output)\ncrs(highways)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PROJCRS[\\\"NAD83 / Texas Centric Albers Equal Area\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4269]],\\n    CONVERSION[\\\"Texas Centric Albers Equal Area\\\",\\n        METHOD[\\\"Albers Equal Area\\\",\\n            ID[\\\"EPSG\\\",9822]],\\n        PARAMETER[\\\"Latitude of false origin\\\",18,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8821]],\\n        PARAMETER[\\\"Longitude of false origin\\\",-100,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8822]],\\n        PARAMETER[\\\"Latitude of 1st standard parallel\\\",27.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8823]],\\n        PARAMETER[\\\"Latitude of 2nd standard parallel\\\",35,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8824]],\\n        PARAMETER[\\\"Easting at false origin\\\",1500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8826]],\\n        PARAMETER[\\\"Northing at false origin\\\",6000000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8827]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"easting (X)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"northing (Y)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"State-wide spatial data presentation requiring true area measurements.\\\"],\\n        AREA[\\\"United States (USA) - Texas.\\\"],\\n        BBOX[25.83,-106.66,36.5,-93.5]],\\n    ID[\\\"EPSG\\\",3083]]\"\n```\n:::\n:::\n\n\n#### House locations GeoPackage\n\nFor data on houses in Houston, we again downloaded from Geofabrick and prepared a GeoPackage containing only houses in the Houston metropolitan area ([Geofabrik, 2022](https://download.geofabrik.de/)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in homes data and reproject CRS\n## Defining query\nquery <- \"SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type is NULL AND name is NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')\"\n## Loading buildings data and storing as sf object\nhomes <- st_read(here(\"data\", \"2024-1-20-post-data\", \"gis_osm_buildings_a_free_1.gpkg\"), query = query) %>% \n  st_make_valid()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading query `SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type is NULL AND name is NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')'\nfrom data source `/Users/linusghanadan/Documents/MEDS/other/linusghanadan.github.io/data/2024-1-20-post-data/gis_osm_buildings_a_free_1.gpkg' \n  using driver `GPKG'\nSimple feature collection with 475941 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -96.50055 ymin: 29.00344 xmax: -94.53285 ymax: 30.50393\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n## Reprojecting CRS to EPSG:3083\nhomes <- st_transform(homes, crs = st_crs(3083))\n## Checking that CRS was changed (should print CRS 3083 at bottom of output)\ncrs(homes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PROJCRS[\\\"NAD83 / Texas Centric Albers Equal Area\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4269]],\\n    CONVERSION[\\\"Texas Centric Albers Equal Area\\\",\\n        METHOD[\\\"Albers Equal Area\\\",\\n            ID[\\\"EPSG\\\",9822]],\\n        PARAMETER[\\\"Latitude of false origin\\\",18,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8821]],\\n        PARAMETER[\\\"Longitude of false origin\\\",-100,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8822]],\\n        PARAMETER[\\\"Latitude of 1st standard parallel\\\",27.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8823]],\\n        PARAMETER[\\\"Latitude of 2nd standard parallel\\\",35,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8824]],\\n        PARAMETER[\\\"Easting at false origin\\\",1500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8826]],\\n        PARAMETER[\\\"Northing at false origin\\\",6000000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8827]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"easting (X)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"northing (Y)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"State-wide spatial data presentation requiring true area measurements.\\\"],\\n        AREA[\\\"United States (USA) - Texas.\\\"],\\n        BBOX[25.83,-106.66,36.5,-93.5]],\\n    ID[\\\"EPSG\\\",3083]]\"\n```\n:::\n:::\n\n\n#### Income data GeoDataBase\n\nWe cannot readily get socioeconomic information for every home, so instead we obtained data from the census tracts in 2019 from the U.S. Census Bureau's American Community Survey ([U.S. Census Bureau, 2020](https://www.census.gov/programs-surveys/acs)). The folder is an ArcGIS, a multi-file proprietary format that's roughly analogous to a GeoPackage file. Using `st_layers()`, we can explore the contents of the GeoDataBase. We can combine the geometry with the attributes to get a feature layer that `sf` can use. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in geodatabase layers, select relevant columns, and reproject CRS\n## Loading income layer as regular dataframe\nincome <- st_read(here(\"data\", \"2024-1-20-post-data\", \"ACS_2019_5YR_TRACT_48_TEXAS.gdb\"), layer = \"X19_INCOME\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `X19_INCOME' from data source \n  `/Users/linusghanadan/Documents/MEDS/other/linusghanadan.github.io/data/2024-1-20-post-data/ACS_2019_5YR_TRACT_48_TEXAS.gdb' \n  using driver `OpenFileGDB'\n```\n:::\n\n```{.r .cell-code}\n## Loading geometry layer as sf object\nacs_geom <- st_read(here(\"data\", \"2024-1-20-post-data\", \"ACS_2019_5YR_TRACT_48_TEXAS.gdb\"), layer = \"ACS_2019_5YR_TRACT_48_TEXAS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `ACS_2019_5YR_TRACT_48_TEXAS' from data source \n  `/Users/linusghanadan/Documents/MEDS/other/linusghanadan.github.io/data/2024-1-20-post-data/ACS_2019_5YR_TRACT_48_TEXAS.gdb' \n  using driver `OpenFileGDB'\nSimple feature collection with 5265 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -106.6456 ymin: 25.83716 xmax: -93.50804 ymax: 36.5007\nGeodetic CRS:  NAD83\n```\n:::\n\n```{.r .cell-code}\n## Selecting GEOID (for join) and median income columns from 'income' dataframe\nincome <- subset(income, select = c(\"GEOID\", \"B19013e1\"))\n## Reprojecting 'acs_geom' sfc to EPSG:3083\nacs_geom <- st_transform(acs_geom, crs = st_crs(3083))\n## Checking that CRS was changed (should print CRS 3083 at bottom of output)\ncrs(acs_geom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PROJCRS[\\\"NAD83 / Texas Centric Albers Equal Area\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4269]],\\n    CONVERSION[\\\"Texas Centric Albers Equal Area\\\",\\n        METHOD[\\\"Albers Equal Area\\\",\\n            ID[\\\"EPSG\\\",9822]],\\n        PARAMETER[\\\"Latitude of false origin\\\",18,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8821]],\\n        PARAMETER[\\\"Longitude of false origin\\\",-100,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8822]],\\n        PARAMETER[\\\"Latitude of 1st standard parallel\\\",27.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8823]],\\n        PARAMETER[\\\"Latitude of 2nd standard parallel\\\",35,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8824]],\\n        PARAMETER[\\\"Easting at false origin\\\",1500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8826]],\\n        PARAMETER[\\\"Northing at false origin\\\",6000000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8827]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"easting (X)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"northing (Y)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"State-wide spatial data presentation requiring true area measurements.\\\"],\\n        AREA[\\\"United States (USA) - Texas.\\\"],\\n        BBOX[25.83,-106.66,36.5,-93.5]],\\n    ID[\\\"EPSG\\\",3083]]\"\n```\n:::\n:::\n\n\n## Part 1: Find locations of blackouts\n\n#### 1) Create a blackout mask\n\nFirst, I'll create a blackout mask by finding the change in night lights intensity that was presumably caused by the storm, reclassifying the difference raster (assuming that any location that experienced a drop of more than 200 nW cm^-2^sr^-1 experienced a blackout), and assigning `NA` to all locations that experienced a drop of less than 200 nW cm^-2^sr^-1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create difference raster for change in night lights caused by storm\nlights_diff <- lights2 - lights1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that difference raster has expected dimensions\n## For both x and y, values in \"to\" column should be the same for all three outputs\nst_dimensions(lights_diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys x/y\nx    1 2400   -100  0.004167 WGS 84 [x]\ny    1 4800     40 -0.004167 WGS 84 [y]\n```\n:::\n\n```{.r .cell-code}\nst_dimensions(lights1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys x/y\nx    1 2400   -100  0.004167 WGS 84 [x]\ny    1 4800     40 -0.004167 WGS 84 [y]\n```\n:::\n\n```{.r .cell-code}\nst_dimensions(lights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from   to offset     delta refsys x/y\nx    1 2400   -100  0.004167 WGS 84 [x]\ny    1 4800     40 -0.004167 WGS 84 [y]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reclassify values less than 200 as NA and values greater than or equal to 200 as \"blackout\"\nblackout_mask <- st_apply(lights_diff, c(\"x\", \"y\"), function(x) ifelse(x < 200, NA, \"blackout\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that NA values were generated in reclassified difference raster (output should just be NA)\nunique(blackout_mask$VNP46A1.A2021047.h08v05.001.2021048091106.tif[\"Mode\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vectorize blackout mask\nblackout_mask <- st_as_sf(blackout_mask)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix any invalid geometries\nblackout_mask <- st_make_valid(blackout_mask)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that only \"blackout\" character strings are showing up in vectorized mask (output should just be \"blackout\")\nunique(blackout_mask$VNP46A1.A2021047.h08v05.001.2021048091106.tif)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"blackout\"\n```\n:::\n:::\n\n\n#### 2) Crop blackout mask to region of interest (Houston metropolitan area)\n\nNext, I'll crop the blackout mask to the region of interest, which in this case is the metropolitan area in and around Houston, Texas. I'll start by defining the Houston metropolitan area in terms of geographic coordinates, turning these coordinates into a polygon using `st_polygon`,  converting the polygon into a simple feature collection using `st_sfc()`, and assigning a CRS. Then, I'll crop (i.e., spatially subset) the blackout mask to our region of interest and re-project the cropped blackout dataset to EPSG:3083 (Texas Centric Albers Equal Area)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare to crop vectorized map to only include observations in Houston\n## Defining Houston metropolitan area coordinates as matrix\nhouston_coords <- matrix(c(-96.5, 29, -96.5, 30.5, -94.5, 30.5, -94.5, 29, -96.5, 29), ncol = 2, byrow = TRUE)\n## Creating polygons from Houston coordinates matrix\nhouston_polygon <- st_polygon(list(houston_coords))\n## Converting Houston polygon into sfc\nhouston <- st_sfc(houston_polygon)\n## Assigning CRS\nhouston <- st_set_crs(houston, \"WGS84\")\n## Fixing any invalid geometries\nhouston <- st_make_valid(houston)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that CRS of 'blackout_mask' and 'houston' are both the same (output should be TRUE)\ncompareCRS(blackout_mask, houston)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crop vectorized map to only include observations in Houston and check that result makes sense\n## Printing number of blackout observations before crop\nprint(nrow(blackout_mask))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 140179\n```\n:::\n\n```{.r .cell-code}\n## Cropping 'blackout_mask' sf by selecting the spatial observations it shares with 'houston' sfc\nblackout_mask <- blackout_mask[houston, ] %>% \n  st_make_valid()\n## Printing number of blackout observations after crop (should be significantly less)\nprint(nrow(blackout_mask))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7247\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reproject CRS of 'blackout_mask' to EPSG:3083 and check that change was made (should print CRS 3083 at bottom of output)\nblackout_mask <- st_transform(blackout_mask, crs = st_crs(3083))\ncrs(blackout_mask)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PROJCRS[\\\"NAD83 / Texas Centric Albers Equal Area\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4269]],\\n    CONVERSION[\\\"Texas Centric Albers Equal Area\\\",\\n        METHOD[\\\"Albers Equal Area\\\",\\n            ID[\\\"EPSG\\\",9822]],\\n        PARAMETER[\\\"Latitude of false origin\\\",18,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8821]],\\n        PARAMETER[\\\"Longitude of false origin\\\",-100,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8822]],\\n        PARAMETER[\\\"Latitude of 1st standard parallel\\\",27.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8823]],\\n        PARAMETER[\\\"Latitude of 2nd standard parallel\\\",35,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8824]],\\n        PARAMETER[\\\"Easting at false origin\\\",1500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8826]],\\n        PARAMETER[\\\"Northing at false origin\\\",6000000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8827]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"easting (X)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"northing (Y)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"State-wide spatial data presentation requiring true area measurements.\\\"],\\n        AREA[\\\"United States (USA) - Texas.\\\"],\\n        BBOX[25.83,-106.66,36.5,-93.5]],\\n    ID[\\\"EPSG\\\",3083]]\"\n```\n:::\n:::\n\n\n#### 3) Exclude highways from blackout mask\n\nI'll exclude highways from the blackout mask through identifying areas within 200m of all highways using `st_buffer`. This will then allow me to isolate the areas that experienced blackouts that are further than 200m from a highway.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find areas within 200 meters of all highways\n## Creating 200 meter undissolved buffers around highways lines\nbuffers <- st_buffer(highways$geom, dist = 200)\n## Printing number of features before dissolving\nlength(buffers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6085\n```\n:::\n\n```{.r .cell-code}\n## Dissolving buffers\nbuffers <- st_union(buffers) %>%\n  st_make_valid\n## Printing number of spatial features after dissolving (should be just 1)\nlength(buffers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find blackout areas that are further than 200 meters from a highway and check that answer makes sense\n## Printing number of blackout observations in 'blackout_mask'\nprint(nrow(blackout_mask))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7247\n```\n:::\n\n```{.r .cell-code}\n## Clipping 'blackout_mask' to exclude spatial observations in buffer zones\nnon_highway_blackouts <- st_difference(blackout_mask, buffers) %>% \n  st_make_valid\n## Printing number of blackout observations in 'non_highway_blackouts' (should be less)\nprint(nrow(non_highway_blackouts))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7240\n```\n:::\n:::\n\n\n#### 4) Find homes impacted by blackouts\n\nNow I can find the homes that were impacted by blackouts by filtering to homes within blackout areas and counting the number of impacted homes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter to homes within blackout areas and check that answer makes sense\n## Printing number of home observations in 'homes'\nprint(nrow(homes))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 475941\n```\n:::\n\n```{.r .cell-code}\n## Selecting the spatial observations 'homes' shares with 'blackout_mask' and storing as new variable\nhomes_blackout_mask <- homes[blackout_mask, ]\n## Printing number of home observations in 'homes_blackout_mask' (should be less)\nprint(nrow(homes_blackout_mask))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 86253\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count number of impacted homes\n## Printing number of homes experiencing blackout\nprint(nrow(homes_blackout_mask))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 86253\n```\n:::\n:::\n\n\n#### 5) Join income data to census tract geometries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare for join by reformatting 'GEOID' column in 'income' dataframe\n## Creating function to keep only the last 11 characters of a column\nkeep_last_10_digits <- function(x) {\n  substr(x, nchar(x) - 10, nchar(x))\n}\n## Applying new function to 'GEOID' column in 'income'\nincome$GEOID <- keep_last_10_digits(income$GEOID)\n## Checking that all 'GEOID' values have exactly 11 characters (output should be 11)\nunique(str_count(income$GEOID))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conduct join to add census tract geometry column to 'income' and check that new geometry column is populated\n## Merging 'income' dataframe with 'acs_geom' sfc based on the common column 'GEOID'\nincome <- left_join(income, acs_geom, by = \"GEOID\")\n## Converting new dataframe to sf object\nincome <- st_as_sf(income)\n## Checking to make sure that geometry column is populated (output should be \"Geometry column is populated\")\nif (any(!st_is_empty(st_geometry(income)))) {\n  print(\"Geometry column is populated.\")\n} else {\n  print(\"Geometry column is empty.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Geometry column is populated.\"\n```\n:::\n:::\n\n\n#### 6) Spatially join census tract data with buildings determined to be impacted by blackouts\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conduct spatial join of census tract polygons and home polygons impacted by blackout\n## Printing number of census tract observations in 'income'\nprint(nrow(income))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5265\n```\n:::\n\n```{.r .cell-code}\n## Creating variable for 'homes_blackout_mask' polygons contained in 'income' polygons, keeping geometry column of census tracts from 'income'\nsel_blackouts <- st_contains(x = income, y = homes_blackout_mask)\n```\n:::\n\n\n#### 7) Find which census tracts had blackouts and plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Printing number of census tract observations in 'sel_blackouts' (should be same)\nprint(nrow(sel_blackouts))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5265\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare to plot\n## Creating variable converting previous variable to bool values\nsel_logical <- lengths(sel_blackouts) > 1\n## Creating new column containing bools (=1 if has home blackouts, otherwise =0)\nincome$has_blackouts_bool <- sel_logical\n## Creating new column containing characters based on bool\nincome <- mutate(income, has_blackouts_char = if_else(has_blackouts_bool, \"Impacted by Blackouts\", \"Unimpacted by Blackouts\"))\n## Reprojecting CRS of Houston coordinates so can use to crop 'income'\nhouston <- st_transform(houston, crs = st_crs(3083))\n## Checking that 'income' and 'houston' have same CRS (output should be TRUE)\ncompareCRS(income, houston)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n## Printing number of census tract observations in 'income' before crop\nprint(nrow(income))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5265\n```\n:::\n\n```{.r .cell-code}\n## Cropping 'income' polygons based on Houston coordinates\nincome <- income[houston, ]\n## Printing number of census tract observations in 'income' after crop (should be less)\nprint(nrow(income))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1112\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot Houston census tracts with homes impacted by blackouts\nggplot() +\n  geom_sf(data = income, aes(fill = has_blackouts_char), color = \"black\") +\n  labs(title = \"Houston Census Tracts with Homes impacted by Blackouts\") +\n  scale_fill_manual(values = c(\"Unimpacted by Blackouts\" = \"white\", \"Impacted by Blackouts\" = \"red\"), name = \"\") +\n  annotation_scale(location = \"br\", width_hint = 0.2) +\n  annotation_north_arrow(location = \"br\", which_north = \"true\", pad_x = unit(0.1, \"npc\"), pad_y = unit(0.1, \"npc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## Part 2: Income analysis\n\n#### Create map showing which census tracts had blackout (discrete variable) and median income (continuous variable)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot median income of Houston census tracts as continuous variable and whether census tract was impacted as discrete variable\nggplot() +\n  geom_sf(data = income, aes(fill = B19013e1), color = \"transparent\") +\n  scale_fill_distiller(name = \"Median Income (USD)\", na.value = \"darkgrey\", palette = \"Purples\") +\n  geom_sf(data = income, fill = \"transparent\", aes(color = has_blackouts_char)) +\n  scale_color_discrete(name = \"\") +\n  labs(title = \"Median Income of Houston Census Tracts\") +\n  annotation_scale(location = \"br\", width_hint = 0.2) +\n  annotation_north_arrow(location = \"br\", which_north = \"true\", pad_x = unit(0.1, \"npc\"), pad_y = unit(0.1, \"npc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n#### Compare median incomes of impacted and unimpacted census tracts\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot side-by-side histogram showing income distribution of impacted and unimpacted Houston census tracts\nggplot(income, aes(x = B19013e1, fill = has_blackouts_char)) +\n  geom_histogram(binwidth = 10000) +\n  labs(title = \"Income Distribution of Houston Census Tracts\",\n       x = \"Median Income (USD)\",\n       y = \"Frequency\") +\n  facet_grid(~has_blackouts_char) +\n  guides(fill = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nFor most Houston census tracts, our side-by-side histograms indicate that there was not a difference based on median income, as the distribution shape and center appear to be about the same for census tracts that were and were not impacted by home blackouts. However, our histograms do show that census tracts with median income of $250,000, which was the highest median income on our distribution, avoided impacts from home blackouts at a disproportionately high rate compared to other census tracts. Furthermore, a limitation of our study is that it does not tell us about why this was the case. For example, it is possible that people in these high income census tracts owned backup generators that they used, or it could be that these census tracts have special access to more reliable forms of electricity from local utilities. Some combination of both of these explanations is also possible.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
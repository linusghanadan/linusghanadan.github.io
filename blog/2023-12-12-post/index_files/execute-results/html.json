{
  "hash": "2ac5682cf64b017a5925c1d00679ba94",
  "result": {
    "markdown": "---\ntitle: \"Time series analysis of nitrogen and phosphorus concentrations in Chesapeake Bay tidal regions since 2010 introduction of TMDL requirements\"\ndescription: \"This analysis seeks to better understand the seasonality of nitrogen and phosphorus concentration in Chesapeake Bay tidal regions, in addition to any non-seasonal trends over the last decade.\"\nauthor: \n  - name: Linus Ghanadan\n    url: https://linusghanadan.github.io/\n    affiliation: MEDS\n    affiliation-url: https://bren.ucsb.edu/masters-programs/master-environmental-data-science\ndate: 12-12-2023\ncategories: [Statistics]\ncitation:\n  url: https://linusghanadan.github.io/blog/2023-12-12-post/\nimage: chesapeake-bay.jpeg\ndraft: false\nformat:\n    html:\n        code-fold: true\n---\n\n\n## Question\n\nSince the 2010 introduction of TMDL requirements, what seasonal and non-seasonal trends are present for nitrogen and phosphorus concentrations in Chesapeake Bay tidal regions?\n\n## Introduction\n\nIn December 2010, the EPA took an unprecedented step in enacting federal policy specific to the Chesapeake Bay, the largest estuary in the United States \\[\\@\\]. Specifically, the EPA established Total Maximum Daily Load (TMDL) requirements for the amount of nitrogen, phosphorus, and sediment that is allowed in the Bay. Nitrogen and phosphorus are the two pollutants primarily responsible for algal blooms, which cause marine dead zones through taking in dissolved oxygen and blocking sunlight. Sediment also contributes to dead zones by blocking sunlight, leading it to be included in the 2010 TMDL requirements.\n\nThis analysis will focus on nitrogen and phosphorus, the two nutrient pollutants regulated under the 2010 TMDL requirements. A 2022 study found that agricultural runoff was the largest source of nutrient pollution, accounting for 48% of nitrogen and 27% of phosphorus in the Chesapeake Bay \\[\\@\\]. Both of these pollutants also get to the Bay as a result of urban and suburban runoff, wastewater treatment plants releasing treated water, and natural sources (i.e., runoff from forests, wetlands, etc.). In addition, about 25% of nitrogen that ends up in the Bay comes from air pollution that is originally emitted to the atmosphere by sources such as cars and factories \\[\\@\\]. Through a process called atmospheric deposition, these nitrogen compounds react with other chemicals to become nitrous oxides, which can be deposited back to Earth's surface through precipitation or as dry deposition.\n\nThrough conducting a time series analysis of post-2010 nitrogen and phosphorus concentration measurements, my goal is to better understand how concentrations have changed since the introduction of TMDL requirements. I'm also interested in the nature of any seasonality and whether the three time series components (i.e., seasonal, trend, and random) are consistent across both nitrogen and phosphorus.\n\n## Data\n\nYearly water quality data on the Chesapeake Bay's tidal and non-tidal regions going back to 1984 is publicly available on the Chesapeake Bay Program's DataHub. Data is organized into either Tier 1, 2, or 3 depending on how it was collected. While Tier 1 and 2 data can be collected by any interested group, Tier 3 data is collected by monitoring stations overseen by experienced professionals. Only Tier 3 data can be used for governmental regulatory assessments.\n\nFor my analysis, I will be using 2010-2019 Tier 3 data collected at 143 different monitoring stations positioned throughout the Chesapeake Bay tidal regions, which includes the mainstem Bay and tributary components. Across the 10 years that I'm looking at, I will be using 43,809 observations of total nitrogen concentration and 43,590 observations of total phosphorus concentration.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import necessary R packages\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(tsibble)\nlibrary(feasts)\nlibrary(generics)\n\n# Create a vector of data URLs\nexcel_urls <- c(\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2019_CEDR_tidal_data_01jun21.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2018_CEDR_tidal_data_01jun21.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2017_CEDR_tidal_data_11oct18.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2016_CEDR_tidal_data_15jun17.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2015_CEDR_tidal_data_15jun17.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2014_CEDR_tidal_data_15jun17.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2013_CEDR_tidal_data_15jun17.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2012_CEDR_tidal_data_15jun17.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2011_CEDR_tidal_data_15jun17.xlsx',\n  'https://datahub-content.chesapeakebay.net/traditional_annual_tidal_02jun21/2010_CEDR_tidal_data_15jun17.xlsx')\n\n# Create a temporary directory to store downloaded files\ntemp_dir <- tempdir()\n\n# Create an empty list to store data frames\ndfs <- list()\n\n# Loop through each URL, extract file name, define local file path, download file, read into R, and append to list of data frames\nfor (url in excel_urls) {\n  file_name <- basename(url)\n  local_path <- file.path(temp_dir, file_name)\n  download.file(url, destfile = local_path, mode = \"wb\")\n  wq_data <- readxl::read_excel(local_path, sheet = 1)\n  dfs[[file_name]] <- wq_data\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all data frames into a single data frame\nwq_data_combined <- bind_rows(dfs)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wrangle data for relevant column variables, and filter for TN (total nitrogen)\nnitr_data <- wq_data_combined %>%\n  dplyr::select(\"MonitoringLocation\", \"SampleDate\", \"Parameter\", \"MeasureValue\", \"Unit\", \"Latitude\", \"Longitude\") %>% \n  filter(Parameter==\"TN\")\n\n# Wrangle data for relevant column variables, and filter for TP (total phosphorus)\nphos_data <- wq_data_combined %>%\n  dplyr::select(\"MonitoringLocation\", \"SampleDate\", \"Parameter\", \"MeasureValue\", \"Unit\", \"Latitude\", \"Longitude\") %>% \n  filter(Parameter==\"TP\")\n\n# Remove unnecessary data and values from environment\nrm(wq_data, wq_data_combined, dfs)\nrm(excel_urls, file_name, local_path, temp_dir, url)\n\n# Summarize nitrogen data by year-month, and store as tsibble\nnitr_monthly_avgs_ts <- nitr_data %>% \n  mutate(yr_mo = tsibble::yearmonth(SampleDate)) %>%\n  group_by(yr_mo) %>%\n  summarize(monthly_avg = mean(MeasureValue, na.rm = TRUE)) %>% \n  tsibble::as_tsibble()\n\n# Create data frame version, and convert year-months to Date class (helpful for plotting)\nnitr_monthly_avgs_df <- as.data.frame(nitr_monthly_avgs_ts)\nnitr_monthly_avgs_df$yr_mo <- as.Date(nitr_monthly_avgs_ts$yr_mo, format = \"%Y-%m\")\n```\n:::\n\n\n## Methods\n\n#### Moving average\n\n#### Autocorrelation function\n\n#### Seasonal-trend decomposition model using locally estimated scatterplot smoothing (LOESS)\n\n## Results\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute nitrogen monthly moving average, and store as tsibble\nnitr_monthly_avgs_ts <- nitr_data %>% \n  mutate(yr_mo = tsibble::yearmonth(SampleDate)) %>%\n  group_by(yr_mo) %>%\n  summarize(monthly_avg = mean(MeasureValue, na.rm = TRUE)) %>% \n  tsibble::as_tsibble()\n\n# Create data frame version, and convert year-months to Date class (helpful for plotting)\nnitr_monthly_avgs_df <- as.data.frame(nitr_monthly_avgs_ts)\nnitr_monthly_avgs_df$yr_mo <- as.Date(nitr_monthly_avgs_ts$yr_mo, format = \"%Y-%m\")\n\n# Plot monthly average nitrogen concentration as a function of year-month\nnitr_monthly_avgs_df %>%\n  ggplot(aes(x = yr_mo, y = monthly_avg)) +\n  stat_summary(geom = 'line', fun = 'mean') +\n  labs(x = 'Year-Month', y = 'Monthly Mean Concentration (mg/L)', title = \"Nitrogen in Chesapeake Bay (2010-2019)\") +\n  scale_x_date(date_breaks = \"1 year\", date_minor_breaks = \"6 months\", date_labels = \"%Y-%m\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute phosphorus monthly moving average, and store as tsibble\nphos_monthly_avgs_ts <- phos_data %>% \n  mutate(yr_mo = tsibble::yearmonth(SampleDate)) %>%\n  group_by(yr_mo) %>%\n  summarize(monthly_avg = mean(MeasureValue, na.rm = TRUE)) %>% \n  tsibble::as_tsibble()\n\n# Create data frame version, and convert year-months to Date class (helpful for plotting)\nphos_monthly_avgs_df <- as.data.frame(phos_monthly_avgs_ts)\nphos_monthly_avgs_df$yr_mo <- as.Date(phos_monthly_avgs_ts$yr_mo, format = \"%Y-%m\")\n\n# Plot monthly average phosphorus concentration as a function of year-month\nphos_monthly_avgs_df %>%\n  ggplot(aes(x = yr_mo, y = monthly_avg)) +\n  stat_summary(geom = 'line', fun = 'mean') +\n  labs(x = 'Year-Month', y = 'Monthly Mean Concentration (mg/L)', title = \"Phosphorus in Chesapeake Bay (2010-2019)\") +\n  scale_x_date(date_breaks = \"1 year\", date_minor_breaks = \"6 months\", date_labels = \"%Y-%m\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot autocorrelation function for nitrogen with lags going back three years\nacf(nitr_monthly_avgs_ts, lag.max = 36)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot autocorrelation function for phosphorus with lags going back three years\nacf(phos_monthly_avgs_ts, lag.max = 36)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conduct STL time series analysis for nitrogen with two-year seasons, and extract components\nnitr_decomp_yearly <- nitr_monthly_avgs_ts %>%\n  fabletools::model(feasts::STL(monthly_avg, t.window = 24)) %>% \n  generics::components()\n\n# Plot STL time series analysis of nitrogen concentration\nautoplot(nitr_decomp_yearly) +\n  labs(title = \"STL Time Series Analysis of Nitrogen Concentration\", x = \"Year Month\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conduct STL time series analysis for phosphorus with two-year seasons, and extract components\nphos_decomp_yearly <- phos_monthly_avgs_ts %>%\n  fabletools::model(feasts::STL(monthly_avg, t.window = 24)) %>% \n  generics::components()\n\n# Plot STL time series analysis\nautoplot(phos_decomp_yearly) +\n  labs(title = \"STL Time Series Analysis of Phosphorus Concentration\", x = \"Year Month\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# For nitrogen, plot monthly mean, seasonally adjusted monthly mean, STL seasonality, and STL trend\nggplot(nitr_monthly_avgs_df, aes(yr_mo)) +\n  scale_x_date(date_breaks = \"1 year\", date_minor_breaks = \"6 months\", date_labels = \"%Y-%m\") +\n  geom_line(aes(y=nitr_decomp_yearly$monthly_avg, color = \"Monthly mean\")) +\n  geom_line(aes(y=nitr_decomp_yearly$season_adjust, color = \"Seasonally adjusted monthly mean\"), linewidth=2) +\n  geom_line(aes(y=nitr_decomp_yearly$trend, color = \"STL trend\"), linewidth = 2) +\n  geom_line(aes(y=nitr_decomp_yearly$season_year, color = \"STL seasonality\")) +\n  labs(x = 'Year-Month',\n       y = 'Concentration (mg/L)',\n       title = \"Nitrogen in Chesapeake Bay (2010-2019)\") +\n  scale_color_manual(name = \"\", values = c(\"Monthly mean\" = \"black\", \"Seasonally adjusted monthly mean\" = \"cornflowerblue\", \"STL seasonality\" = \"seagreen\", \"STL trend\" = \"red\"), breaks = c(\"Monthly mean\", \"Seasonally adjusted monthly mean\", \"STL seasonality\", \"STL trend\")) +\n  theme_bw() +\n  theme(legend.position = \"top\", plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# For phosphorus, plot monthly mean, seasonally adjusted monthly mean, STL seasonality, and STL trend\nggplot(phos_monthly_avgs_df, aes(yr_mo)) +\n  scale_x_date(date_breaks = \"1 year\", date_minor_breaks = \"6 months\", date_labels = \"%Y-%m\") +\n  geom_line(aes(y=phos_decomp_yearly$monthly_avg, color = \"Monthly mean\")) +\n  geom_line(aes(y=phos_decomp_yearly$season_adjust, color = \"Seasonally adjusted monthly mean\"), linewidth=2) +\n  geom_line(aes(y=phos_decomp_yearly$trend, color = \"STL trend\"), linewidth = 2) +\n  geom_line(aes(y=phos_decomp_yearly$season_year, color = \"STL seasonality\")) +\n  labs(x = 'Year-Month',\n       y = 'Concentration (mg/L)',\n       title = \"Phosphorus in Chesapeake Bay (2010-2019)\") +\n  scale_color_manual(name = \"\", values = c(\"Monthly mean\" = \"black\", \"Seasonally adjusted monthly mean\" = \"cornflowerblue\", \"STL seasonality\" = \"seagreen\", \"STL trend\" = \"red\"), breaks = c(\"Monthly mean\", \"Seasonally adjusted monthly mean\", \"STL seasonality\", \"STL trend\")) +\n  theme_bw() +\n  theme(legend.position = \"top\", plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nnitr_season_reg <- lm(monthly_avg ~ season_year, data = nitr_decomp_yearly)\n\n# Inspect the results\nsummary(nitr_season_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = monthly_avg ~ season_year, data = nitr_decomp_yearly)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.28803 -0.07036 -0.01624  0.04451  0.50728 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.89766    0.01029   87.26   <2e-16 ***\nseason_year  1.03839    0.08624   12.04   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1127 on 118 degrees of freedom\nMultiple R-squared:  0.5513,\tAdjusted R-squared:  0.5475 \nF-statistic:   145 on 1 and 118 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nphos_season_reg <- lm(monthly_avg ~ season_year, data = phos_decomp_yearly)\n\n# Inspect the results\nsummary(phos_season_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = monthly_avg ~ season_year, data = phos_decomp_yearly)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-0.0144318 -0.0031716 -0.0003977  0.0037799  0.0156940 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.0565260  0.0005042  112.11   <2e-16 ***\nseason_year 0.9844122  0.0511039   19.26   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.005523 on 118 degrees of freedom\nMultiple R-squared:  0.7587,\tAdjusted R-squared:  0.7567 \nF-statistic: 371.1 on 1 and 118 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nnitr_trend_reg <- lm(season_adjust ~ trend, data = nitr_decomp_yearly)\n\n# Inspect the results\nsummary(nitr_trend_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = season_adjust ~ trend, data = nitr_decomp_yearly)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.23711 -0.06182 -0.00003  0.04863  0.42548 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.3337     0.1177  -2.834  0.00541 ** \ntrend         1.3731     0.1310  10.478  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.08117 on 118 degrees of freedom\nMultiple R-squared:  0.482,\tAdjusted R-squared:  0.4776 \nF-statistic: 109.8 on 1 and 118 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nphos_trend_reg <- lm(season_adjust ~ trend, data = phos_decomp_yearly)\n\n# Inspect the results\nsummary(phos_trend_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = season_adjust ~ trend, data = phos_decomp_yearly)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-0.0094940 -0.0030672 -0.0005091  0.0028284  0.0122709 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.008829   0.007288  -1.212    0.228    \ntrend        1.157817   0.128921   8.981 5.11e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.004259 on 118 degrees of freedom\nMultiple R-squared:  0.406,\tAdjusted R-squared:  0.401 \nF-statistic: 80.66 on 1 and 118 DF,  p-value: 5.115e-15\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nnitr_rem_reg <- lm(season_adjust ~ remainder, data = nitr_decomp_yearly)\n\n# Inspect the results\nsummary(nitr_rem_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = season_adjust ~ remainder, data = nitr_decomp_yearly)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.10433 -0.05031  0.01394  0.03938  0.09735 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.896582   0.005036  178.05   <2e-16 ***\nremainder   1.172299   0.060511   19.37   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05516 on 118 degrees of freedom\nMultiple R-squared:  0.7608,\tAdjusted R-squared:  0.7588 \nF-statistic: 375.3 on 1 and 118 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nphos_rem_reg <- lm(season_adjust ~ remainder, data = phos_decomp_yearly)\n\n# Inspect the results\nsummary(phos_rem_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = season_adjust ~ remainder, data = phos_decomp_yearly)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-0.0098639 -0.0020605 -0.0002014  0.0022335  0.0048012 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.0564406  0.0002759  204.57   <2e-16 ***\nremainder   1.0794588  0.0649103   16.63   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.003022 on 118 degrees of freedom\nMultiple R-squared:  0.7009,\tAdjusted R-squared:  0.6984 \nF-statistic: 276.6 on 1 and 118 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nnitr_trend_est <- lm(trend ~ yr_mo, data = nitr_decomp_yearly)\n\n# Inspect the results\nsummary(nitr_trend_est)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = trend ~ yr_mo, data = nitr_decomp_yearly)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.084653 -0.045620 -0.000179  0.032870  0.135876 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  1.121e+00  7.856e-02  14.268  < 2e-16 ***\nyr_mo       -1.365e-05  4.775e-06  -2.859  0.00502 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05514 on 118 degrees of freedom\nMultiple R-squared:  0.0648,\tAdjusted R-squared:  0.05687 \nF-statistic: 8.176 on 1 and 118 DF,  p-value: 0.005022\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a regression\nphos_trend_est <- lm(trend ~ yr_mo, data = phos_decomp_yearly)\n\n# Inspect the results\nsummary(phos_trend_est)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = trend ~ yr_mo, data = phos_decomp_yearly)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-0.0054726 -0.0011369 -0.0002914  0.0014229  0.0039014 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  9.174e-02  2.858e-03   32.10   <2e-16 ***\nyr_mo       -2.150e-06  1.737e-07  -12.38   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.002006 on 118 degrees of freedom\nMultiple R-squared:  0.5649,\tAdjusted R-squared:  0.5612 \nF-statistic: 153.2 on 1 and 118 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\n## Conclusion\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}